{"remainingRequest":"/home/mario/mywork/AppWeb/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mario/mywork/AppWeb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mario/mywork/AppWeb/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mario/mywork/AppWeb/src/pages/ProcessoJudicial/BloquearLoteForm.vue?vue&type=template&id=4afc4702&","dependencies":[{"path":"/home/mario/mywork/AppWeb/src/pages/ProcessoJudicial/BloquearLoteForm.vue","mtime":1716233624540},{"path":"/home/mario/mywork/AppWeb/node_modules/cache-loader/dist/cjs.js","mtime":1685830798716},{"path":"/home/mario/mywork/AppWeb/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1685830799308},{"path":"/home/mario/mywork/AppWeb/node_modules/cache-loader/dist/cjs.js","mtime":1685830798716},{"path":"/home/mario/mywork/AppWeb/node_modules/vue-loader/lib/index.js","mtime":1685830799116}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}